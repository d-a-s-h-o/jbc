{VERSION 3 0 "IBM INTEL NT" "3.0" }
{USTYLETAB {CSTYLE "Maple Input" -1 0 "Courier" 1 12 128 0 128 1 0 1 
0 0 1 0 0 0 0 }{PSTYLE "Normal" -1 0 1 {CSTYLE "" -1 -1 "Times" 1 12 
0 0 128 1 2 1 2 0 0 0 0 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE 
"Text Output" -1 2 1 {CSTYLE "" -1 -1 "Courier" 1 12 255 0 0 1 0 1 0 
0 0 1 3 0 3 }1 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "" 2 6 1 
{CSTYLE "" -1 -1 "" 0 1 0 0 0 0 0 0 0 0 0 0 2 0 0 }0 0 0 -1 -1 -1 0 0 
0 0 0 0 -1 0 }{PSTYLE "Title" 0 18 1 {CSTYLE "" -1 -1 "" 1 18 0 0 0 0 
0 1 1 0 0 0 0 0 0 }3 0 0 -1 12 12 0 0 0 0 0 0 19 0 }{PSTYLE "R3 Font 0
" -1 256 1 {CSTYLE "" -1 -1 "Helvetica" 1 12 128 0 128 1 2 1 2 0 0 0 
0 0 0 }0 0 0 -1 -1 -1 0 0 0 0 0 0 -1 0 }{PSTYLE "R3 Font 2" -1 257 1 
{CSTYLE "" -1 -1 "Courier" 1 11 0 128 0 1 2 1 2 0 0 0 0 0 0 }0 0 0 -1 
-1 -1 0 0 0 0 0 0 -1 0 }}
{SECT 0 {EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 14 "# poly_con.mws" }}}
{EXCHG {PARA 18 "" 0 "" {TEXT -1 22 "Polynomial congruences" }}}
{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 191 "find_solutions := proc(a, b
, m)\nlocal X;\nfor X from 0 to (m-1) do\nif a*X + b mod m = 0\nthen l
print(`x =`, X, `mod`, m, `is a solution of`, a, \n       `*x +`, b, `
= 0 (mod`, m,`)`)\nfi\nod;\nend:" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 24 "find_so
lutions(2, 3, 7);" }}{PARA 6 "" 1 "" {TEXT -1 71 "x =   2   modp   7  \+
 is a solution of   2   *x +   3   = 0 (mod   7   )" }}}{EXCHG {PARA 
0 "> " 0 "" {MPLTEXT 1 0 24 "find_solutions(2, 2, 4);" }}{PARA 6 "" 1 
"" {TEXT -1 71 "x =   1   modp   4   is a solution of   2   *x +   2  \+
 = 0 (mod   4   )" }}{PARA 6 "" 1 "" {TEXT -1 71 "x =   3   modp   4  \+
 is a solution of   2   *x +   2   = 0 (mod   4   )" }}}{EXCHG {PARA 
0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 
0 264 "how_many_solutions := proc(a, b, m)\nlocal count, X;\ncount := \+
0:\nfor X from 0 to (m-1) do\nif a*X + b mod m = 0\nthen count := coun
t+1\nelse count := count\nfi\nod;\nlprint(a, `x +`, b, `= 0 (mod`, m,`
) has`, count, \n                `mutually incongruent solutions`)\nen
d:" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 ">
 " 0 "" {MPLTEXT 1 0 28 "how_many_solutions(2, 3, 7);" }}{PARA 6 "" 1 
"" {TEXT -1 71 "2   x +   3   = 0 (mod   7   ) has   1   mutually inco
ngruent solutions" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 28 "how_ma
ny_solutions(2, 2, 4);" }}{PARA 6 "" 1 "" {TEXT -1 71 "2   x +   2   =
 0 (mod   4   ) has   2   mutually incongruent solutions" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 354 "solutions := proc(a, b, m)\nlocal count, X;\ncount :
= 0:\nfor X from 0 to (m-1) do\nif a*X + b mod m = 0\nthen count := co
unt+1\nelse count := count\nfi\nod;\nif count = 1 then\nlprint(a, `x +
`, b, `= 0 (mod`, m,`) has just one solution`)\nelse\nlprint(a, `x +`,
 b, `= 0 (mod`, m,`) has`, count, \n                           `mutual
ly incongruent solutions`)\nfi;\nend:" }}}{EXCHG {PARA 0 "> " 0 "" 
{MPLTEXT 1 0 0 "" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 19 "solutio
ns(2, 3, 7);" }}{PARA 6 "" 1 "" {TEXT -1 52 "2   x +   3   = 0 (mod   \+
7   ) has just one solution" }}}{EXCHG {PARA 0 "> " 0 "" {MPLTEXT 1 0 
19 "solutions(2, 2, 4);" }}{PARA 6 "" 1 "" {TEXT -1 71 "2   x +   2   \+
= 0 (mod   4   ) has   2   mutually incongruent solutions" }}}{EXCHG 
{PARA 0 "> " 0 "" {MPLTEXT 1 0 0 "" }}}}{MARK "16 0 0" 0 }{VIEWOPTS 1 
1 0 1 1 1803 }
